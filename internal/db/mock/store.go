// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/burakkarasel/Theatre-API/internal/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/burakkarasel/Theatre-API/internal/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateDirector mocks base method.
func (m *MockStore) CreateDirector(arg0 context.Context, arg1 db.CreateDirectorParams) (db.Director, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirector", arg0, arg1)
	ret0, _ := ret[0].(db.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirector indicates an expected call of CreateDirector.
func (mr *MockStoreMockRecorder) CreateDirector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirector", reflect.TypeOf((*MockStore)(nil).CreateDirector), arg0, arg1)
}

// CreateMovie mocks base method.
func (m *MockStore) CreateMovie(arg0 context.Context, arg1 db.CreateMovieParams) (db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0, arg1)
	ret0, _ := ret[0].(db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockStoreMockRecorder) CreateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockStore)(nil).CreateMovie), arg0, arg1)
}

// CreateTicket mocks base method.
func (m *MockStore) CreateTicket(arg0 context.Context, arg1 db.CreateTicketParams) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", arg0, arg1)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockStoreMockRecorder) CreateTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockStore)(nil).CreateTicket), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteMovie mocks base method.
func (m *MockStore) DeleteMovie(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockStoreMockRecorder) DeleteMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockStore)(nil).DeleteMovie), arg0, arg1)
}

// DeleteTicket mocks base method.
func (m *MockStore) DeleteTicket(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockStoreMockRecorder) DeleteTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockStore)(nil).DeleteTicket), arg0, arg1)
}

// GetDirector mocks base method.
func (m *MockStore) GetDirector(arg0 context.Context, arg1 int64) (db.Director, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirector", arg0, arg1)
	ret0, _ := ret[0].(db.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirector indicates an expected call of GetDirector.
func (mr *MockStoreMockRecorder) GetDirector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirector", reflect.TypeOf((*MockStore)(nil).GetDirector), arg0, arg1)
}

// GetMovie mocks base method.
func (m *MockStore) GetMovie(arg0 context.Context, arg1 int64) (db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", arg0, arg1)
	ret0, _ := ret[0].(db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockStoreMockRecorder) GetMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockStore)(nil).GetMovie), arg0, arg1)
}

// GetTicket mocks base method.
func (m *MockStore) GetTicket(arg0 context.Context, arg1 int64) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", arg0, arg1)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket.
func (mr *MockStoreMockRecorder) GetTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockStore)(nil).GetTicket), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListDirectors mocks base method.
func (m *MockStore) ListDirectors(arg0 context.Context, arg1 db.ListDirectorsParams) ([]db.Director, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectors", arg0, arg1)
	ret0, _ := ret[0].([]db.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectors indicates an expected call of ListDirectors.
func (mr *MockStoreMockRecorder) ListDirectors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectors", reflect.TypeOf((*MockStore)(nil).ListDirectors), arg0, arg1)
}

// ListMovies mocks base method.
func (m *MockStore) ListMovies(arg0 context.Context, arg1 int32) ([]db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", arg0, arg1)
	ret0, _ := ret[0].([]db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockStoreMockRecorder) ListMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockStore)(nil).ListMovies), arg0, arg1)
}

// ListTickets mocks base method.
func (m *MockStore) ListTickets(arg0 context.Context, arg1 db.ListTicketsParams) ([]db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTickets", arg0, arg1)
	ret0, _ := ret[0].([]db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTickets indicates an expected call of ListTickets.
func (mr *MockStoreMockRecorder) ListTickets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTickets", reflect.TypeOf((*MockStore)(nil).ListTickets), arg0, arg1)
}
