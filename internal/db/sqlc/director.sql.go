// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: director.sql

package db

import (
	"context"
)

const createDirector = `-- name: CreateDirector :one
INSERT INTO directors(first_name, last_name, oscars)
VALUES ($1, $2, $3)
RETURNING id, first_name, last_name, oscars, created_at
`

type CreateDirectorParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Oscars    int64  `json:"oscars"`
}

func (q *Queries) CreateDirector(ctx context.Context, arg CreateDirectorParams) (Director, error) {
	row := q.db.QueryRowContext(ctx, createDirector, arg.FirstName, arg.LastName, arg.Oscars)
	var i Director
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Oscars,
		&i.CreatedAt,
	)
	return i, err
}

const getDirector = `-- name: GetDirector :one
SELECT id, first_name, last_name, oscars, created_at
FROM directors
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDirector(ctx context.Context, id int64) (Director, error) {
	row := q.db.QueryRowContext(ctx, getDirector, id)
	var i Director
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Oscars,
		&i.CreatedAt,
	)
	return i, err
}

const listDirectors = `-- name: ListDirectors :many
SELECT id, first_name, last_name, oscars, created_at
FROM directors
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListDirectorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDirectors(ctx context.Context, arg ListDirectorsParams) ([]Director, error) {
	rows, err := q.db.QueryContext(ctx, listDirectors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Director{}
	for rows.Next() {
		var i Director
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Oscars,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
